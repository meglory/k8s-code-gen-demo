/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s-code-gen-demo/pkg/apis/democontroller/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DemoLister helps list Demos.
type DemoLister interface {
	// List lists all Demos in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Demo, err error)
	// Demos returns an object that can list and get Demos.
	Demos(namespace string) DemoNamespaceLister
	DemoListerExpansion
}

// demoLister implements the DemoLister interface.
type demoLister struct {
	indexer cache.Indexer
}

// NewDemoLister returns a new DemoLister.
func NewDemoLister(indexer cache.Indexer) DemoLister {
	return &demoLister{indexer: indexer}
}

// List lists all Demos in the indexer.
func (s *demoLister) List(selector labels.Selector) (ret []*v1alpha1.Demo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Demo))
	})
	return ret, err
}

// Demos returns an object that can list and get Demos.
func (s *demoLister) Demos(namespace string) DemoNamespaceLister {
	return demoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DemoNamespaceLister helps list and get Demos.
type DemoNamespaceLister interface {
	// List lists all Demos in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Demo, err error)
	// Get retrieves the Demo from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Demo, error)
	DemoNamespaceListerExpansion
}

// demoNamespaceLister implements the DemoNamespaceLister
// interface.
type demoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Demos in the indexer for a given namespace.
func (s demoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Demo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Demo))
	})
	return ret, err
}

// Get retrieves the Demo from the indexer for a given namespace and name.
func (s demoNamespaceLister) Get(name string) (*v1alpha1.Demo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("demo"), name)
	}
	return obj.(*v1alpha1.Demo), nil
}
